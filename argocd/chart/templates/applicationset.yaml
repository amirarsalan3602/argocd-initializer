apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: argocd-initializer
  namespace: argocd
spec:
  goTemplate: true
  goTemplateOptions: ["missingkey=error"]
  generators:
    - merge:
        mergeKeys:
          - pathKey
        generators:
          - matrix:
              generators:
                - git:
                    repoURL: {{ .Values.mainRepo }}
                    revision: {{ .Values.mainRevision | default .Values.defaultRevision }}
                    pathParamPrefix: simple
                    directories:
                      - path: 'namespaces/*/*'
                    values:
                      appType: 'simpleManifests'
                      {{- include "argocd-initializer.generator.values" . | nindent 22 }}
                - list:
                    elements:
                      - pathKey: {{` "{{ .simple.path.path }}" `}} # points to git directory generator with pathParamPrefix of simple
                        name: {{` "{{ index .simple.path.segments 1 }}-{{ .simple.path.basenameNormalized }}" `}}
                        namespace: {{` "{{ index .simple.path.segments 1 }}" `}}
          - matrix:
              generators:
                - git:
                    repoURL: {{ .Values.mainRepo }}
                    revision: {{ .Values.defaultRevision }}
                    pathParamPrefix: helm
                    files:
                      - path: 'namespaces/**/chart.yaml'
                    values:
                      appType: 'helm'
                      {{- include "argocd-initializer.generator.values" . | nindent 22 }}
                - list:
                    elements:
                      - pathKey: {{` "{{ .helm.path.path }}" `}} # points to git files generator with pathParamPrefix of helm
                        name: {{` "{{ index .helm.path.segments 1 }}-{{ .helm.path.basenameNormalized }}" `}}
                        namespace: {{` "{{ index .helm.path.segments 1 }}" `}}
{{- `
  template:
    metadata:
      name: "{{ .name }}"
    spec: 
      project:  '{{ and (hasKey . "autoSync") (eq .autoSync true) | ternary .name "default" }}'
      destination:
        server: 'https://kubernetes.default.svc'
        namespace: "{{ .namespace }}"
      syncPolicy:
        syncOptions:
          - ServerSideApply=true
          - CreateNamespace=true
  templatePatch: |
    spec:
      {{- if and (hasKey . "autoSync") (eq .autoSync true) }}
      syncPolicy:
        automated: {}
      {{- end }}
      {{- if hasKey  . "ignoreDifferences" }}
      ignoreDifferences:
        {{- toYaml .ignoreDifferences | nindent 8 }}
      {{- end }}
      {{- if eq .values.appType "helm" }}
      sources:
        - repoURL: {{ .repoUrl }}
          chart: {{ .chart }}
          targetRevision: {{ .chartVersion }}
          helm:
            valueFiles:
              {{- if  or (not (hasKey . "ignoreBaseRepo")) (eq .ignoreBaseRepo false) }}
              - "$baseValues/kubernetes/{{ .helm.path.basenameNormalized }}/helmValues.yaml"
      	      {{- end }}
              - "$values/{{ .pathKey }}/helmValues.yaml"
        {{- if  or (not (hasKey . "ignoreBaseRepo")) (eq .ignoreBaseRepo false) }}
        - repoURL: {{ .values.baseRepo }}
          targetRevision: {{ .values.baseRevision | default .values.defaultRevision }}
          ref: baseValues
        {{- end }}
        - repoURL: {{ .values.mainRepo }}
          targetRevision: {{ .values.mainRevision | default .values.defaultRevision }}
          ref: values
      {{- else }}
      source:
        repoURL: {{ .values.mainRepo }}
        path: {{ .pathKey }}
        targetRevision: {{ .values.mainRevision | default .values.defaultRevision }}
        directory:
          recurse: true
      {{- end }}
` -}}
